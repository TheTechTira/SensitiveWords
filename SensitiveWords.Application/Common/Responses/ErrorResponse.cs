namespace SensitiveWords.Application.Common.Responses
{
    /// <summary>
    /// Standard error envelope for API responses.
    /// 
    /// Why:
    /// - Aligns with <see href="https://datatracker.ietf.org/doc/html/rfc7807">RFC 7807 (Problem Details)</see>
    ///   so clients get a predictable error shape.
    /// - Separates *human-facing* text (<see cref="Title"/>, <see cref="Detail"/>) from
    ///   *machine-facing* codes (<see cref="Status"/>, <see cref="ErrorCode"/>).
    /// - Includes a <see cref="TraceId"/> to correlate requests with logs and telemetry.
    /// 
    /// Notes for the next dev:
    /// - Prefer meaningful <see cref="Type"/> URIs pointing to your docs (e.g., "/docs/errors/word_conflict").
    ///   Keep the value stable; clients may branch on it.
    /// - <see cref="ErrorCode"/> is your internal, stable code (e.g., "word_conflict", "db_error");
    ///   clients should branch on this or <see cref="Type"/>, not on the human text.
    /// - For validation failures, populate <see cref="Errors"/> with field-level messages.
    /// - Consider configuring JSON to ignore nulls so omitted fields don’t clutter responses.
    /// </summary>
    public class ErrorResponse
    {
        /// <summary>
        /// A URI reference that identifies the problem type.
        /// Should resolve to human documentation for this error type (RFC 7807).
        /// Defaults to "about:blank" when no specific type is available.
        /// Example: <c>https://api.example.com/errors/word_conflict</c> or <c>/docs/errors/word_conflict</c>.
        /// </summary>
        public string Type { get; init; } = "about:blank";

        /// <summary>
        /// Short, human-readable summary of the error type.
        /// Keep this stable for a given <see cref="Type"/>; avoid embedding instance-specific details here.
        /// </summary>
        public string Title { get; init; } = "An error occurred.";

        /// <summary>
        /// The HTTP status code generated by the origin server for this occurrence of the problem.
        /// Example: 400, 404, 409, 422, 500.
        /// </summary>
        public int Status { get; init; }

        /// <summary>
        /// Unique request correlation identifier (e.g., <c>HttpContext.TraceIdentifier</c> or <c>Activity.Current?.Id</c>).
        /// Helps clients and support teams correlate the error with server logs and traces.
        /// </summary>
        public string TraceId { get; init; } = "";

        /// <summary>
        /// Human-friendly details for this specific occurrence (optional).
        /// Use this to add context like which entity was missing, or why a rule failed.
        /// Keep sensitive data out of this field.
        /// </summary>
        public string? Detail { get; init; }

        /// <summary>
        /// Stable, machine-readable application error code (e.g., <c>word_conflict</c>, <c>db_error</c>).
        /// Clients should branch on this (or <see cref="Type"/>) rather than parsing <see cref="Title"/> or <see cref="Detail"/>.
        /// </summary>
        public string? ErrorCode { get; init; }

        /// <summary>
        /// Field-level validation errors, keyed by field/property name.
        /// Typically produced from ModelState (e.g., ASP.NET Core) for 400/422 responses.
        /// Example: <c>{ "word": ["Word is required.", "Maximum length is 255."] }</c>
        /// </summary>
        public Dictionary<string, string[]>? Errors { get; init; }
    }
}
